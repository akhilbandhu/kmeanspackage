summary(forecast)
autoplot(forecast)
# that seems like a better graph
# take a look at train and test data
autoplot(forecast) +
autolayer(myts_test, series="Test Data")+
autolayer(fitted(forecast))
# Holt's linear trend
forecast <- holt(myts, h=30)
autoplot(forecast)
# Holt's damped trend
forecast <- holt(myts_train, h=30, damped = TRUE, PI = F)
autoplot(forecast) +
autolayer(myts_test)
# trend graph
trend_fc1 <- hw(myts, seasonal = "additive")
trend_fc2 <- hw(myts, seasonal = "multiplicative")
# Simple Exponential Smoothing
# this seems like the best one till now
forecast <- ses(myts_train, h = 30)
autoplot(forecast)
# that seems like a better graph
# take a look at train and test data
autoplot(forecast) +
autolayer(myts_test, series="Test Data")+
autolayer(fitted(forecast))
max_savings <- c(max(savings_monday),max(savings_tuesday),max(savings_wednesday),
max(savings_thursday),max(savings_friday),max(savings_saturday),max(savings_sunday))
max_savings_contracts <- c(which.max(savings_monday),which.max(savings_tuesday),
which.max(savings_wednesday),which.max(savings_thursday),
which.max(savings_friday),which.max(savings_saturday),
which.max(savings_sunday))
days <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
output_table <- data.frame(days, max_savings, max_savings_contracts)
max_savings <- c(max(savings_monday),max(savings_tuesday),max(savings_wednesday),
max(savings_thursday),max(savings_friday),max(savings_saturday),max(savings_sunday))
max_savings_contracts <- c(which.max(savings_monday),which.max(savings_tuesday),
which.max(savings_wednesday),which.max(savings_thursday),
which.max(savings_friday),which.max(savings_saturday),
which.max(savings_sunday))
for(i in 1:length(max_savings)) {
if(max_savings[i] < 0) {
max_savings[i] = 0
}
}
for(i in 1:length(max_savings_contracts)) {
if(max_savings_contracts[i] == 1) {
max_savings_contracts[i] = 0
}
}
days <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
output_table <- data.frame(days, max_savings, max_savings_contracts)
# 90% of the times on a monday, 4 or more loads are shipped
length(which(shipped_monday$n >= 4))/37
View(shipped_monday)
plot(shipment_data$X)
View(shipment_data)
shipment_data %>%
filter(equipment_class == "DRY")
shipment_data <- shipment_data %>%
filter(equipment_class == "DRY")
View(shipment_data_count)
# lets plot this
ggplot(
shipment_data_count, aes(x = as.Date(ship_date), y = n)
) +
geom_line() +
scale_x_date(date_labels = "%b") +
labs(
x = "Date",
y = "Loads",
title = "Daily Shipment Volume"
) +
geom_smooth(method="loess")
View(shipped_tuesday)
length(which(shipped_saturday$n >= 1))/36
length(which(shipped_sunday$n >= 1))/36
length(which(shipped_thursday$n >= 5))/nrow(shipped_thursday)
# Overall Savings
total_saving <- savings_monday +
savings_tuesday + savings_wednesday +
savings_thursday + savings_friday +
savings_saturday + savings_sunday
total_savings
total_saving
# we want to keep a track of cost of 5 contracts without flex contract
shipped_tuesday <- shipped_tuesday %>%
mutate(load_cost_without_flex = ifelse(n >= 5,
5*avg_cost_per_load,
n*avg_cost_per_load))
View(shipped_tuesday)
savings_tuesday
# total cost tuesday without flex
total_cost_without_flex_tue <- sum(shipped_tuesday$load_cost_without_flex)
# total cost with flex
total_cost_with_flex_tue <- flex_contract_tue_thur*nrow(shipped_tuesday)
# Total Savings
savings_tuesday <- total_cost_without_flex_tue-total_cost_with_flex_tue
savings_tuesday
summary(shipment_data$spend)
# we want to keep a track of cost of 5 contracts without flex contract
shipped_tuesday <- shipped_tuesday %>%
mutate(load_cost_without_flex = ifelse(n >= 5,
5*avg_cost_per_load,
n*avg_cost_per_load))
# total cost tuesday without flex
total_cost_without_flex_tue <- sum(shipped_tuesday$load_cost_without_flex)
# total cost with flex
total_cost_with_flex_tue <- flex_contract_tue_thur*nrow(shipped_tuesday)
# Total Savings
savings_tuesday <- total_cost_without_flex_tue-total_cost_with_flex_tue
# lets do the same steps with all days
# start with monday
# we have 4 loads per monday guaranteed with flex
shipped_monday_cost <- shipment_data %>%
subset(shipment_data$day == "Monday")
shipped_monday_cost <- as_tibble(aggregate(shipped_monday_cost$spend, by=list(ship_date = shipped_monday_cost$ship_date), FUN=sum))
# this will give the number of shipments on the day and the total cost
shipped_monday <- inner_join(shipped_monday_data_count, shipped_monday_cost, by="ship_date")
# now we can get the average cost of shipments
shipped_monday <- shipped_monday %>%
mutate(avg_cost_per_load = x/n)
shipped_monday <- shipped_monday %>%
mutate(load_cost_without_flex = ifelse(n >= 4,
4*avg_cost_per_load,
n*avg_cost_per_load))
# total cost tuesday without flex
total_cost_without_flex_mon <- sum(shipped_monday$load_cost_without_flex)
# total cost with flex
total_cost_with_flex_mon <- flex_contract_mon*nrow(shipped_monday)
# Total Savings
savings_monday <- total_cost_without_flex_mon-total_cost_with_flex_mon
# Wednesday
# we have 4 loads per wednesday guaranteed with flex
shipped_wed_cost <- shipment_data %>%
subset(shipment_data$day == "Wednesday")
shipped_wed_cost <- as_tibble(aggregate(shipped_wed_cost$spend, by=list(ship_date = shipped_wed_cost$ship_date), FUN=sum))
# this will give the number of shipments on the day and the total cost
shipped_wednesday <- inner_join(shipped_wednesday, shipped_wed_cost, by="ship_date")
# now we can get the average cost of shipments
shipped_wednesday <- shipped_wednesday %>%
mutate(avg_cost_per_load = x/n)
shipped_wednesday <- shipped_wednesday %>%
mutate(load_cost_without_flex = ifelse(n >= 4,
4*avg_cost_per_load,
n*avg_cost_per_load))
# total cost wednesday without flex
total_cost_without_flex_wed <- sum(shipped_wednesday$load_cost_without_flex)
# total cost with flex
total_cost_with_flex_wed <- flex_contract_mon*nrow(shipped_wednesday)
# Total Savings
savings_wednesday <- total_cost_without_flex_wed-total_cost_with_flex_wed
# Thursday
# we have 5 loads per Thursday guaranteed with flex
shipped_thu_cost <- shipment_data %>%
subset(shipment_data$day == "Thursday")
shipped_thu_cost <- as_tibble(aggregate(shipped_thu_cost$spend, by=list(ship_date = shipped_thu_cost$ship_date), FUN=sum))
# this will give the number of shipments on the day and the total cost
shipped_thursday <- inner_join(shipped_thursday, shipped_thu_cost, by="ship_date")
# now we can get the average cost of shipments
shipped_thursday <- shipped_thursday %>%
mutate(avg_cost_per_load = x/n)
shipped_thursday <- shipped_thursday %>%
mutate(load_cost_without_flex = ifelse(n >= 5,
5*avg_cost_per_load,
n*avg_cost_per_load))
# total cost wednesday without flex
total_cost_without_flex_thu <- sum(shipped_thursday$load_cost_without_flex)
# total cost with flex
total_cost_with_flex_thu <- flex_contract_tue_thur*nrow(shipped_thursday)
# Total Savings
savings_thursday <- total_cost_without_flex_thu-total_cost_with_flex_thu
# Overall Savings
total_saving <- savings_monday +
savings_tuesday + savings_wednesday +
savings_thursday
total_saving
View(shipped_monday)
savings_monday <- NULL
index <- 1
# we want to calculate total cost of shipment without flex
# we want to restrict to total cost of the shipments on monday
max_cost_all_loads_monday <- sum(shipped_monday$x)
# we dont want to take into account anything more than the actual number of loads
# shipped on mondays
# so on a day where there are 9 loads shipped, we dont want to calculate the cost of
# loads without flex for more than 9 loads
for(i in 1:22){
flex <- i*500*37
shipped_monday$load_cost_without_flex <- shipped_monday$avg_cost_per_load*i
cost_of_all_loads <- sum(shipped_monday$load_cost_without_flex)
if(cost_of_all_loads <= max_cost_all_loads_monday) {
savings_monday[index] <- cost_of_all_loads - flex
}
else{
savings_monday[index] <- max_cost_all_loads_monday - flex
}
index <- index+1
}
# now lets do this for every single day
savings_tuesday <- NULL
savings_wednesday <- NULL
savings_thursday <- NULL
savings_friday <- NULL
savings_saturday <- NULL
savings_sunday <- NULL
index <- 1
# Tueday
max_cost_all_loads_tuesday <- sum(shipped_tuesday$x)
for(i in 1:22){
flex <- i*500*37
shipped_tuesday$load_cost_without_flex <- shipped_tuesday$avg_cost_per_load*i
cost_of_all_loads <- sum(shipped_tuesday$load_cost_without_flex)
if(cost_of_all_loads <= max_cost_all_loads_tuesday) {
savings_tuesday[index] <- cost_of_all_loads - flex
}
else{
savings_tuesday[index] <- max_cost_all_loads_tuesday - flex
}
index <- index+1
}
index <- 1
# Wednesday
max_cost_all_loads_wednesday<- sum(shipped_wednesday$x)
for(i in 1:22){
flex <- i*500*37
shipped_wednesday$load_cost_without_flex <- shipped_wednesday$avg_cost_per_load*i
cost_of_all_loads <- sum(shipped_wednesday$load_cost_without_flex)
if(cost_of_all_loads <= max_cost_all_loads_wednesday) {
savings_wednesday[index] <- cost_of_all_loads - flex
}
else{
savings_wednesday[index] <- max_cost_all_loads_wednesday - flex
}
index <- index+1
}
index <- 1
max_cost_all_loads_thursday <- sum(shipped_thursday$x)
for(i in 1:22){
flex <- i*500*37
shipped_thursday$load_cost_without_flex <- shipped_thursday$avg_cost_per_load*i
cost_of_all_loads <- sum(shipped_thursday$load_cost_without_flex)
if(cost_of_all_loads <= max_cost_all_loads_thursday) {
savings_thursday[index] <- cost_of_all_loads - flex
}
else{
savings_thursday[index] <- max_cost_all_loads_thursday - flex
}
index <- index+1
}
index <- 1
max_cost_all_loads_friday <- sum(shipped_friday$x)
for(i in 1:22){
flex <- i*500*36
shipped_friday$load_cost_without_flex <- shipped_friday$avg_cost_per_load*i
cost_of_all_loads <- sum(shipped_friday$load_cost_without_flex)
if(cost_of_all_loads <= max_cost_all_loads_friday) {
savings_friday[index] <- cost_of_all_loads - flex
}
else{
savings_friday[index] <- max_cost_all_loads_friday - flex
}
index <- index+1
}
index <- 1
max_cost_all_loads_saturday <- sum(shipped_saturday$x)
for(i in 1:22){
flex <- i*500*36
shipped_saturday$load_cost_without_flex <- shipped_saturday$avg_cost_per_load*i
cost_of_all_loads <- sum(shipped_saturday$load_cost_without_flex)
if(cost_of_all_loads <= max_cost_all_loads_saturday) {
savings_saturday[index] <- cost_of_all_loads - flex
}
else{
savings_saturday[index] <- max_cost_all_loads_saturday - flex
}
index <- index+1
}
index <- 1
max_cost_all_loads_sunday <- sum(shipped_sunday$x)
for(i in 1:22){
flex <- i*500*36
shipped_sunday$load_cost_without_flex <- shipped_sunday$avg_cost_per_load*i
cost_of_all_loads <- sum(shipped_sunday$load_cost_without_flex)
if(cost_of_all_loads <= max_cost_all_loads_sunday) {
savings_sunday[index] <- cost_of_all_loads - flex
}
else{
savings_sunday[index] <- max_cost_all_loads_sunday - flex
}
index <- index+1
}
max_savings <- c(max(savings_monday),max(savings_tuesday),max(savings_wednesday),
max(savings_thursday),max(savings_friday),max(savings_saturday),max(savings_sunday))
max_savings_contracts <- c(which.max(savings_monday),which.max(savings_tuesday),
which.max(savings_wednesday),which.max(savings_thursday),
which.max(savings_friday),which.max(savings_saturday),
which.max(savings_sunday))
days <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
output_table <- data.frame(days, max_savings, max_savings_contracts)
# Simple Exponential Smoothing
# this seems like the best one till now
forecast <- ses(myts_train, h = 30)
summary(forecast)
autoplot(forecast)
# that seems like a better graph
# take a look at train and test data
autoplot(forecast) +
autolayer(myts_test, series="Test Data")+
autolayer(fitted(forecast))
View(myts)
summary(stock_data)
all.data <- read_csv("/Users/akhil/CSIS 4560/Stock_Sentiment_Analytics/all-data.csv", col_names = F)
stock.data <- read_csv("/Users/akhil/CSIS 4560/Stock_Sentiment_Analytics/stock_data.csv")
# packages used
library(tidytext)
library(reshape2)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(topicmodels)
all.data <- read_csv("/Users/akhil/CSIS 4560/Stock_Sentiment_Analytics/all-data.csv", col_names = F)
stock.data <- read_csv("/Users/akhil/CSIS 4560/Stock_Sentiment_Analytics/stock_data.csv")
summary(all.data)
View(all.data)
summary(stock.data)
View(stock.data)
word_counts
# let's plot the word count using ggplot
ggplot(
word_counts2, aes(x = word2, y = n)
) + geom_col() +
coord_flip() +
ggtitle("Stock Word Counts")
# we will have to create a custom stop tibble to add to stop words data frame
# word clouds now
wordcloud(
word = word_counts2$word,
freq = word_counts2$n,
max.words = 70
)
library(topicmodels)
# we will have to create a custom stop tibble to add to stop words data frame
# word clouds now
wordcloud(
word = word_counts2$word,
freq = word_counts2$n,
max.words = 70
)
# now for sentiment dictionaries
# sentiment lexicon
# bing, loughran, afinn, nrc dictionaries
# need to remember to cite the NRC emotion lexicon
# need to go through the NRC lexicon
get_sentiments("nrc")
# Visualize sentiment_counts using the new sentiment factor column
ggplot(sentiment_counts, aes(sentiment2, n)) +
geom_col() +
coord_flip() +
# Change the title to "Sentiment Counts in NRC", x-axis to "Sentiment", and y-axis to "Counts"
labs(
title = "Sentiment Counts in NRC",
x = "Sentiment",
y = "Counts"
)
# lets plot the top 10 positive and negative words
ggplot(
word_counts3, aes(word2, n,fill=sentiment)) +
geom_col() +
coord_flip() +
facet_wrap(~sentiment, scales = "free") +
labs(
title = "Sentiment Word Counts",
x = "Word"
)
getwd
getwd()
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("devtools","styler","testthat"))
library(devtools)
library(styler)
library(testthat)
library(tidyverse)
install.packages(c("devtools", "styler", "testthat"))
library(readr)
getwd()
devtools::document()
View(TeamConferences)
View(Conferences)
View(Teams)
View(team_conference)
team_conference <- as_tibble(inner_join(TeamConferences, Teams, by="TeamID"))
team_conference <- as_tibble(inner_join(team_conference, Conferences, by = "ConfAbbrev"))
team_conference <- team_conference %>%
group_by(LastD1Season) %>%
arrange(desc(Season))
team_conference <- subset(team_conference, LastSeasonID = "2018")
team_conference <- team_conference %>% distinct()
team_conference <- team_conference[,-c(1,2)]
View(basketball_data)
class(basketball_data$TeamName)
basketball_data$TeamName <- as.factor(basketball_data$TeamName)
class(basketball_data$TeamName)
inner_join(basketball_data, team_conference, by = "TeamName")
class(team_conference$TeamName)
inner_join(basketball_data, team_conference, by = TeamName)
team_conference
basketball_data
levels(basketball_data$TeamName)
?read.fwf
?read.table
knitr::opts_chunk$set(echo = TRUE)
#' Function to read in the data
#'
#' @param file_name the file we are reading from
#'
#' @export
#'
#' @return The function will return basketball data as a tibble
#'
read_function <- function(fileUrl) {
basketball_data <- as_tibble(read.fwf(fileUrl, widths=c(11,24,3,23,4,4,21)))
return(basketball_data)
}
#' Function to read in the data
#'
#' @param file_name the file we are reading from
#'
#' @export
#'
#' @return The function will return basketball data as a tibble
#'
read_function <- function(fileUrl) {
basketball_data <- as_tibble(read.fwf(fileUrl, widths=c(11,24,3,23,4,4,21)))
return(basketball_data)
}
devtools::document()
library(basketballpackage)
?basketballpackage
library(testthat)
library(devtools)
library(styler)
setwd("~/MATH-3190")
knitr::opts_chunk$set(echo = TRUE)
devtools::create("basketballpackage")
#' Function to read in the data
#'
#' @param file_name the file we are reading from
#'
#' @export
#'
#' @return The function will return basketball data as a tibble
#'
source("read_function.R")
#' Function to read in the data
#'
#' @param file_name the file we are reading from
#'
#' @export
#'
#' @return The function will return basketball data as a tibble
#'
source("~/MATH-3190/basketballpackage/R/read_function.R")
devtools::document()
devtools::document("~/MATH-3190/basketballpackage")
devtools::document("~/MATH-3190/basketballpackage")
devtools::document("~/MATH-3190/basketballpackage")
read_function <- function(fileUrl) {
basketball_data <- as_tibble(read.fwf(fileUrl, widths=c(11,24,3,23,4,4,21)))
return(basketball_data)
}
#' Function that will filter the tibble to only games played by a given team
#'
#'
#' @param basketball_data the data frame we are using to do the manipulation
#' @param team_name the name of the team of whose games we want
#'
#' @export
#'
library(basketballpackage)
?read_function
devtools::document("~/MATH-3190/basketballpackage")
devtools::document("~/MATH-3190/basketballpackage")
devtools::document("~/MATH-3190/basketballpackage")
test <- read_function('http://kenpom.com/cbbga22.txt')
View(test)
View(test)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(styler)
library(testthat)
library(tidyverse)
library(readr)
devtools::create("~/MATH-3190/basketballpackage")
devtools::create("~/MATH-3190/basketballpackage")
source("~/.active-rstudio-document")
test <- as_tibble(read.fwf('http://kenpom.com/cbbga22.txt', widths=c(11,24,3,23,4,4,21), strip.white = T))
test
as.factor(test$V2)
test$V2 <- as.factor(test$V2)
test
team_conference
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
devtools::create("~/MATH-3190/kmeanspackage")
devtools::document()
devtools::document("~/MATH-3190/kmeanspackage")
ls
setwd("~/MATH-3190/basketballpackage")
devtools::test()
setwd("~/MATH-3190/kmeanspackage")
devtools::test()
